const _ = go.GraphObject.make;
const addBeforeBase64 = "data:image/png;base64,";

class Renderer {
    constructor(data, HTMLElementId, nodesToShow) {
        try {
            this.diagram = _(go.Diagram, HTMLElementId, {
                "undoManager.isEnabled": true,
                initialContentAlignment: go.Spot.Center,
                layout: _(go.ForceDirectedLayout, {
                    maxIterations: 3000,
                    defaultElectricalCharge: 400,
                    isOngoing: false,
                    setsPortSpots: false
                })
            });

            this.diagram.click = function (e) {
                e.diagram.commit(function (d) {
                    d.clearHighlighteds();
                }, "no highlighteds");
            };


            this.diagram.nodeTemplateMap = this.getNodeTemplateMap();
            this.diagram.linkTemplateMap = this.getLinkTemplateMap();

            let linkDataArray = [];
            let nodeDataArray = [];



            data.forEach((obj, index) => {
                let linkCat = getLinkCategory(obj['F069']);
                // adding  the array of links
                linkDataArray.push({
                    from: obj['K0202'],
                    to: obj['K0201'],
                    category: linkCat,
                    f069: obj['F069'],
                    meaning: obj['TXT_1'],
                    fromName: obj['SHORTNAME1'],
                    toName: obj['SHORTNAME2'],
                    T0901: obj['T0901']
                });


                // looking if node has already been added to the node data array
                let K0201Found = false;
                let K0202Found = false;
                let K0201Str = obj["K0201"];
                let K0202Str = obj["K0202"];
                for (let i = 0; i < nodeDataArray.length; i++) {
                    if (K0201Str === nodeDataArray[i]['key'])
                        K0201Found = true;
                    if (K0202Str === nodeDataArray[i]['key'])
                        K0202Found = true;
                }

                // if node wasn't found in preceding links - adding it to the Node Data Array
                if (!K0201Found) {
                    let category = getNodeCategory(obj['K021_1']);
                    let _visible = nodesToShow ? !!nodesToShow[obj["K0201"]] : true;
                    nodeDataArray.push({
                        key: obj["K0201"],
                        name: obj["SHORTNAME1"],
                        another: obj["SHORTNAME2"],
                        pairedNodeId: obj["K0202"],
                        color: getNodeColor(obj["K060_1"]),
                        category: category,
                        isCollapsed: false,
                        visible: _visible
                    });
                }
                if (!K0202Found) {
                    let category = getNodeCategory(obj['K021_2']);
                    let _visible = nodesToShow ? !!nodesToShow[obj["K0202"]] : true;
                    nodeDataArray.push({
                        key: obj["K0202"],
                        name: obj["SHORTNAME2"],
                        another: obj["SHORTNAME1"],
                        pairedNodeId: obj["K0201"],
                        color: getNodeColor(obj["K060_2"]),
                        category: category,
                        isCollapsed: false,
                        visible: _visible
                    });
                }
            });
            console.log(`Diagram summary: V: ${nodeDataArray.length} E: ${linkDataArray.length}`);
            this.diagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
            this.diagram.commandHandler.zoomToFit();
        } catch (e) {
            let Paragraph = document.createElement("p");
            Paragraph.innerHTML = e.stack;

            let el = document.getElementById(HTMLElementId);
            if (el) el.appendChild(Paragraph);
            alert(`@renderer.js ${e.stack}`);
        }
    }
    deleteDiagram() {
        if (this.diagram) {
            this.diagram.div = null;
            this.diagram = null;
        }
    }


    getNodeTemplateMap() {

        // data = JSON.parse(JSON.stringify(data));
        const GO_JS_COLORS = {
            GREEN: "#057c48",
            LIGHTGREEN: "#89c864",
            YELLOW: "#f9d491",
            VIOLET: "#899dd0"
        };





        /*********************************************************************************************************************************
         ******************************************                    *******************************************************************
         ******************************************   Begin Templates  *******************************************************************    ли
         ******************************************                    *******************************************************************
         ********************************************************************************************************************************/

        let nodeClicked = function (e, obj) {
            let adjacent = obj.findNodesConnected();
            while (adjacent.next()) {
                console.log(adjacent.value.part)
            }
        };

        let legalSubjectNode =
            _(go.Node, "Vertical", {
                click: nodeClicked,
                fromSpot: go.Spot.AllSides, // coming out from middle-right
                toSpot: go.Spot.AllSides,
                isShadowed: false
            }, new go.Binding('visible', 'visible'),
                _(go.Panel, "Auto",
                    _(go.Shape, "Rectangle", { fill: "white", stroke: 'grey', strokeWidth: 1 },
                        new go.Binding("fill", "color", (color) => {
                            switch (color) {
                                case "lightgreen":
                                    return GO_JS_COLORS.LIGHTGREEN;
                                case "green":
                                    return GO_JS_COLORS.GREEN;
                                case "yellow":
                                    return GO_JS_COLORS.YELLOW;
                                case "violet":
                                    return GO_JS_COLORS.VIOLET;
                                default:
                                    return "pink";
                            }
                        }),
                        new go.Binding("stroke", "color", (color) => {
                            switch (color) {
                                case "lightgreen":
                                    return GO_JS_COLORS.LIGHTGREEN;
                                case "green":
                                    return GO_JS_COLORS.GREEN;
                                case "yellow":
                                    return GO_JS_COLORS.YELLOW;
                                case "violet":
                                    return GO_JS_COLORS.VIOLET;
                                default:
                                    return "pink";
                            }
                        })
                    ),
                    _(go.TextBlock, {
                        margin: 15,
                        font: 'bold 15px Montserrat, sans-serif'
                    },
                        new go.Binding("text", "name"))
                ),
                _("TreeExpanderButton", {
                    name: 'TREEBUTTON',
                    width: 15,
                    height: 15,
                    alignment: go.Spot.BottomCenter,
                    //alignmentFocus: go.Spot.Center,
                }),
                { // this tooltip shows the name and picture of the kitten
                    toolTip:
                        _("ToolTip",
                            _(go.Panel, "Vertical",
                                _(go.TextBlock, { margin: 3, text: "la-la-la" }
                                )
                            ) // end Panel 
                        )  // end Adornment
                }
            );

        let bankNode =
            _(go.Node, "Spot", {
                fromSpot: go.Spot.AllSides, // coming out from middle-right
                toSpot: go.Spot.AllSides
            }, new go.Binding('visible', 'visible'),
                _(go.Picture, {
                    source: "lnkd_prsn_vis_icons/bank_violet.png",
                    desiredSize: new go.Size(100, 100)
                }, new go.Binding("source", "color", (color) => {
                    if (!color) {
                        return addBeforeBase64 + nodeImageStringHelper("bank", "white", false)
                    } else {
                        return addBeforeBase64 + nodeImageStringHelper("bank", color, false)
                    }
                })),
                _(go.Panel, "Vertical", { background: "rgba(255,255,255,0.5)" },
                    _(go.TextBlock, {
                        margin: 8,
                        isMultiline: true,
                        textAlign: "center",
                        font: 'bold 15px Montserrat, sans-serif'
                    }, new go.Binding('text', 'name')),
                ),
                _("TreeExpanderButton", {
                    name: 'TREEBUTTON',
                    width: 10,
                    height: 10,
                    alignment: go.Spot.BottomCenter,
                    alignmentFocus: go.Spot.Center,
                })
            );
        let govNode =
            _(go.Node, "Spot", {
                fromSpot: go.Spot.AllSides, // coming out from middle-right
                toSpot: go.Spot.AllSides
            }, new go.Binding('visible', 'visible'),
                _(go.Picture, {
                    desiredSize: new go.Size(100, 130)
                }, new go.Binding("source", "color", (color) => {
                    if (!color) {
                        return addBeforeBase64 + nodeImageStringHelper("gov", "white", false)
                    } else {
                        return addBeforeBase64 + nodeImageStringHelper("gov", color, false)
                    }
                })),
                _(go.Panel, "Vertical", { background: "rgba(255,255,255,0.5)" },
                    _(go.TextBlock, {
                        margin: 8,
                        isMultiline: true,
                        textAlign: "center",
                        font: 'bold 15px Montserrat, sans-serif'
                    }, new go.Binding('text', 'name')),
                ),
                _("TreeExpanderButton", {
                    name: 'TREEBUTTON',
                    width: 10,
                    height: 10,
                    alignment: go.Spot.BottomCenter,
                    alignmentFocus: go.Spot.Center,
                })
            );
        let foreignBankNode =
            _(go.Node, "Spot", {
                fromSpot: go.Spot.AllSides, // coming out from middle-right
                toSpot: go.Spot.AllSides
            }, new go.Binding('visible', 'visible'),
                _(go.Picture, {
                    source: "lnkd_prsn_vis_icons/bank_violet.png",
                    desiredSize: new go.Size(100, 100)
                }, new go.Binding("source", "color", (color) => {
                    if (!color) {
                        return addBeforeBase64 + nodeImageStringHelper("bank", "white", true)
                    } else {
                        return addBeforeBase64 + nodeImageStringHelper("bank", color, true)
                    }
                })),
                _(go.Panel, "Vertical", { background: "rgba(255,255,255,0.5)" },
                    _(go.TextBlock, {
                        margin: 8,
                        isMultiline: true,
                        textAlign: "center",
                        font: 'bold 15px Montserrat, sans-serif'
                    }, new go.Binding('text', 'name')),
                ),
                _("TreeExpanderButton", {
                    name: 'TREEBUTTON',
                    width: 10,
                    height: 10,
                    alignment: go.Spot.BottomCenter,
                    alignmentFocus: go.Spot.Center,
                })
            );
        let physicalSubjectNode =
            _(go.Node, "Vertical", {
                fromSpot: go.Spot.AllSides, // coming out from middle-right
                toSpot: go.Spot.AllSides
            }, new go.Binding('visible', 'visible'),
                // the whole node panel
                _(go.Picture, {
                    source: "lnkd_prsn_vis_icons/human.png",
                    desiredSize: new go.Size(100, 100)
                }, new go.Binding("source", "color", (color) => {
                    if (!color) {
                        return addBeforeBase64 + nodeImageStringHelper("human", "white", false)
                    } else {
                        return addBeforeBase64 + nodeImageStringHelper("human", color, false)
                    }
                })),
                _(go.Panel, "Vertical", {
                    background: "rgba(255,255,255,0.5)",
                },
                    _(go.TextBlock, {
                        width: 150,
                        margin: 8,
                        isMultiline: true,
                        textAlign: "center",
                        font: 'bold 15px Arial, sans-serif'
                    }, new go.Binding('text', 'name')),
                ),
                _("TreeExpanderButton", {
                    name: 'TREEBUTTON',
                    width: 15,
                    height: 15,
                    alignment: go.Spot.BottomCenter,
                    alignmentFocus: go.Spot.Center,
                })
            );
        let foreignPhysicalSubjectNode =
            _(go.Node, "Vertical", {
                fromSpot: go.Spot.AllSides, // coming out from middle-right
                toSpot: go.Spot.AllSides
            }, new go.Binding('visible', 'visible'),
                // the whole node panel
                _(go.Picture, {
                    source: "lnkd_prsn_vis_icons/human.png",
                    desiredSize: new go.Size(100, 100)
                }, new go.Binding("source", "color", (color) => {
                    if (!color) {
                        return addBeforeBase64 + nodeImageStringHelper("human", "white", true)
                    } else {
                        return addBeforeBase64 + nodeImageStringHelper("human", color, true)
                    }
                })),
                _(go.Panel, "Vertical", {
                    background: "rgba(255,255,255,0.5)",
                },
                    _(go.TextBlock, {
                        width: 150,
                        margin: 8,
                        isMultiline: true,
                        textAlign: "center",
                        font: 'bold 15px Arial, sans-serif'
                    }, new go.Binding('text', 'name')),
                ),
                _("TreeExpanderButton", {
                    name: 'TREEBUTTON',
                    width: 15,
                    height: 15,
                    alignment: go.Spot.BottomCenter,
                    alignmentFocus: go.Spot.Center,
                })
            );

        let testNodeTemplate =
            _(go.Node, "Vertical", {
                fromSpot: go.Spot.AllSides, // coming out from middle-right
                toSpot: go.Spot.AllSides,
                isShadowed: false
            },
                _(go.Panel, "Auto",
                    _(go.Shape, "Rectangle", { fill: "white", stroke: 'grey', strokeWidth: 1 },
                        new go.Binding("fill", "color", (color) => {
                            switch (color) {
                                case "lightgreen":
                                    return GO_JS_COLORS.LIGHTGREEN;
                                case "green":
                                    return GO_JS_COLORS.GREEN;
                                case "yellow":
                                    return GO_JS_COLORS.YELLOW;
                                case "violet":
                                    return GO_JS_COLORS.VIOLET;
                                default:
                                    return "pink";
                            }
                        }),
                        new go.Binding("stroke", "color", (color) => {
                            switch (color) {
                                case "lightgreen":
                                    return GO_JS_COLORS.LIGHTGREEN;
                                case "green":
                                    return GO_JS_COLORS.GREEN;
                                case "yellow":
                                    return GO_JS_COLORS.YELLOW;
                                case "violet":
                                    return GO_JS_COLORS.VIOLET;
                                default:
                                    return "pink";
                            }
                        })
                    ),
                    _(go.Panel, "Vertical",
                        _(go.TextBlock, {
                            margin: 15,
                            font: 'bold 15px Montserrat, sans-serif'
                        }, new go.Binding("text", "name")),
                        _(go.TextBlock, {
                            margin: 15,
                            font: 'bold 12px Montserrat, sans-serif'
                        }, new go.Binding("text", "key")))

                ),
                _("TreeExpanderButton", {
                    name: 'TREEBUTTON',
                    width: 15,
                    height: 15,
                    alignment: go.Spot.BottomCenter,
                    //alignmentFocus: go.Spot.Center,
                })
            );



        /********************************************************************************************************************************
         ******************************************                   *******************************************************************
         ******************************************   Templates Links *******************************************************************    
         ******************************************                   *******************************************************************
         *******************************************************************************************************************************/


        let templateMap = new go.Map();
        templateMap.add("Bank", bankNode);
        templateMap.add("PS", physicalSubjectNode);
        templateMap.add("BankF", foreignBankNode);
        templateMap.add("PSF", foreignPhysicalSubjectNode);
        templateMap.add("LS", legalSubjectNode);
        templateMap.add("LSF", foreignLegalSubjectNode);
        templateMap.add("GOV", govNode);

        return templateMap;
    }

    getLinkTemplateMap() {
        let linkAdorment =
            _(go.Adornment, "Auto",
                _(go.Panel, "Auto",
                    _(go.Shape, "Rectangle", { fill: "white", stroke: "grey" }),
                    _(go.Panel, "Vertical",
                        _(go.TextBlock, { margin: 5 },
                            new go.Binding("text", "meaning", (meaning = "лЮлх л▓л║л░лил░лйлЙ") => {
                                return `лЪлЙЛЈЛЂлйлхлйлйЛЈ: ${meaning}`
                            })),
                        _(go.TextBlock, { margin: 5 },
                            new go.Binding("text", "f069", (f069 = "лЮлх л▓л║л░лил░лйлЙ") => {
                                return `лблИл┐ лил▓'ЛЈлил║ЛЃ: ${f069}`
                            })),
                        _(go.TextBlock, { margin: 5 },
                            new go.Binding("text", "fromName", (fromName = "лЮлх л▓л║л░лил░лйлЙ") => {
                                return `лњЛќл┤: ${fromName}`
                            })),
                        _(go.TextBlock, { margin: 5 },
                            new go.Binding("text", "toName", (toName = "лЮлх л▓л║л░лил░лйлЙ") => {
                                return `лћлЙ: ${toName}`
                            })),

                    )
                ) // end Panel 
            )  // end Adornment

        const managerLink =
            _(go.Link,
                {
                    opacity: 1,
                    routing: go.Link.Orthogonal,
                    curve: go.Link.JumpGap,
                    corner: 10,
                    layerName: "Background",
                    toShortLength: 3,
                    fromShortLength: 3,
                },
                _(go.Shape, { strokeWidth: 3 }
                    /*,
                                    // the Shape.stroke color depends on whether Link.isHighlighted is true
                                    new go.Binding("stroke", "isHighlighted", function (h) {
                                        return h ? "red" : "black";
                                    })
                                        .ofObject(),
                                    // the Shape.strokeWidth depends on whether Link.isHighlighted is true
                                    new go.Binding("strokeWidth", "isHighlighted", function (h) {
                                        return h ? 3 : 1;
                                    })
                                        .ofObject()
                    */
                ),
                _(go.Shape, { toArrow: "Block" },
                    // the Shape.fill color depends on whether Link.isHighlighted is true
                    new go.Binding("fill", "isHighlighted", function (h) {
                        return h ? "red" : "black";
                    }).ofObject()),
                _(go.Shape, { fromArrow: "BackwardTriangle" }),
                { // this tooltip shows the name and picture of the kitten
                    toolTip: linkAdorment
                }
            );
        let founderLink =
            _(go.Link,
                {
                    opacity: 1,
                    routing: go.Link.Orthogonal,
                    curve: go.Link.JumpOver,
                    corner: 10,
                    layerName: "Background",
                    fromEndSegmentLength: 60,
                    toEndSegmentLength: 60
                },
                new go.Binding("fromShortLength", 'T0901', T0901 => {
                    if (T0901 > 0 && T0901 <= 25) {
                        return 7
                    }
                    if (T0901 > 25 && T0901 <= 50) {
                        return 15
                    }
                    if (T0901 > 50 && T0901 <= 75) {
                        return 27
                    }
                    if (T0901 > 75 && T0901 <= 100) {
                        return 30
                    }
                    return 1;
                }),
                new go.Binding("fromEndSegmentLength", 'T0901', T0901 => {
                    if (T0901 > 0 && T0901 <= 25) {
                        return 10
                    }
                    if (T0901 > 25 && T0901 <= 50) {
                        return 20
                    }
                    if (T0901 > 50 && T0901 <= 75) {
                        return 25
                    }
                    if (T0901 > 75 && T0901 <= 100) {
                        return 40
                    }
                    return 1;
                }),
                new go.Binding("toEndSegmentLength", 'T0901', T0901 => {
                    if (T0901 > 0 && T0901 <= 25) {
                        return 10
                    }
                    if (T0901 > 25 && T0901 <= 50) {
                        return 20
                    }
                    if (T0901 > 50 && T0901 <= 75) {
                        return 25
                    }
                    if (T0901 > 75 && T0901 <= 100) {
                        return 40
                    }
                    return 1;
                }),
                _(go.Shape, {
                    opacity: 0.8,
                    strokeWidth: 3,
                    stroke: "#f79d91"
                },
                    new go.Binding('strokeWidth', 'T0901', (T0901 = 4) => {
                        let res = parseInt(T0901, 10) / 4;
                        return res < 1 ? 1 : res;
                    }
                    )),
                _(go.Shape, {
                    toArrow: "",
                    fill: "#f79d91",
                    stroke: "#f79d91",
                }),
                _(go.Shape, {
                    fromArrow: "BackwardTriangle",
                    fill: "#f79d91",
                    stroke: "#f79d91",
                    scale: 2
                }, new go.Binding("scale", 'T0901', (T0901) => {
                    if (T0901 > 0 && T0901 <= 25) {
                        return 1
                    }
                    if (T0901 > 25 && T0901 <= 50) {
                        return 2
                    }
                    if (T0901 > 50 && T0901 <= 75) {
                        return 3
                    }
                    if (T0901 > 75 && T0901 <= 100) {
                        return 5
                    }
                    return 1
                })),
                _(go.Panel, "Auto",
                    _(go.Shape, "RoundedRectangle", // the label background, which becomes transparent around the edges
                        {
                            fill: "#f79d91",
                            stroke: null
                        }),
                    _(go.TextBlock, "pr",  // the label text
                        {
                            textAlign: "center",
                            margin: 5
                        },
                        // editing the text automatically updates the model data
                        new go.Binding("text", 'T0901', (t0901) => {
                            if (!t0901) {
                                return "";
                            }
                            return `${t0901}%`
                        }))
                ),
                { // this tooltip shows the name and picture of the kitten
                    toolTip: linkAdorment
                }
            );
        let stakeholderLink =
            _(go.Link,
                {
                    opacity: 1,
                    routing: go.Link.Orthogonal,
                    curve: go.Link.JumpOver,
                    corner: 10,
                    layerName: "Background",
                    fromEndSegmentLength: 60,
                    toEndSegmentLength: 60
                },
                new go.Binding("fromShortLength", 'T0901', T0901 => {
                    if (T0901 > 0 && T0901 <= 25) {
                        return 7
                    }
                    if (T0901 > 25 && T0901 <= 50) {
                        return 15
                    }
                    if (T0901 > 50 && T0901 <= 75) {
                        return 27
                    }
                    if (T0901 > 75 && T0901 <= 100) {
                        return 30
                    }
                }),
                new go.Binding("fromEndSegmentLength", 'T0901', T0901 => {
                    if (T0901 > 0 && T0901 <= 25) {
                        return 10
                    }
                    if (T0901 > 25 && T0901 <= 50) {
                        return 15
                    }
                    if (T0901 > 50 && T0901 <= 75) {
                        return 23
                    }
                    if (T0901 > 75 && T0901 <= 100) {
                        return 40
                    }
                }),
                new go.Binding("toEndSegmentLength", 'T0901', T0901 => {
                    if (T0901 > 0 && T0901 <= 25) {
                        return 10
                    }
                    if (T0901 > 25 && T0901 <= 50) {
                        return 15
                    }
                    if (T0901 > 50 && T0901 <= 75) {
                        return 23
                    }
                    if (T0901 > 75 && T0901 <= 100) {
                        return 40
                    }
                }),
                _(go.Shape, {
                    opacity: 0.8,
                    strokeWidth: 3,
                    stroke: "#8d9dd0"
                },
                    new go.Binding('strokeWidth', 'T0901', (T0901 = 4) => {
                        let res = parseInt(T0901, 10) / 4;
                        return res < 1 ? 1 : res;
                    }
                    )),
                _(go.Shape, {
                    toArrow: "",
                    fill: "#8d9dd0",
                    stroke: "#8d9dd0",
                }),
                _(go.Shape, {
                    fromArrow: "BackwardTriangle",
                    fill: "#8d9dd0",
                    stroke: "#8d9dd0",
                    scale: 2
                }, new go.Binding("scale", 'T0901', (T0901) => {
                    if (T0901 > 0 && T0901 <= 25) {
                        return 1
                    }
                    if (T0901 > 25 && T0901 <= 50) {
                        return 2
                    }
                    if (T0901 > 50 && T0901 <= 75) {
                        return 3
                    }
                    if (T0901 > 75 && T0901 <= 100) {
                        return 5
                    }
                    return 1
                })),
                _(go.Panel, "Auto",
                    _(go.Shape, "RoundedRectangle", // the label background, which becomes transparent around the edges
                        {
                            fill: "#8d9dd0",
                            stroke: null
                        }),
                    _(go.TextBlock, "pr",  // the label text
                        {
                            textAlign: "center",
                            margin: 5
                        },
                        // editing the text automatically updates the model data
                        new go.Binding("text", 'T0901', (t0901) => {
                            if (!t0901) {
                                return "";
                            }
                            return `${t0901}%`
                        }))
                ),
                { // this tooltip shows the name and picture of the kitten
                    toolTip: linkAdorment
                }
            );
        let familyLink =
            _(go.Link,
                {
                    //routing: go.Link.Orthogonal ,
                    opacity: 1,
                    curve: go.Link.JumpGap,
                    layerName: "Background"
                },
                _(go.Shape, {
                    strokeWidth: 2,
                    stroke: "#f9d491"
                }),
                { // this tooltip shows the name and picture of the kitten
                    toolTip: linkAdorment
                }
                /*,
                            _(go.Shape,
                                {
                                    toArrow: "Block",
                                    fill: "#f9d491",
                                    stroke: "#f9d491",
                                }),
                            _(go.Shape,
                                {
                                    fromArrow: "Block",
                                    fill: "#f9d491",
                                    stroke: "#f9d491"
                                })*/
            );
        let otherLink =
            _(go.Link, {
                opacity: 1,
                routing: go.Link.Orthogonal,
                curve: go.Link.JumpGap,
                corner: 10,
                layerName: "Background"
            },
                _(go.Shape, {
                    strokeWidth: 3,
                    stroke: "#f79d91" // old 
                }),
                _(go.Shape, {
                    strokeWidth: 2,
                    toArrow: "Circle",
                    fill: "white",
                    stroke: "#f79d91",
                }),
                _(go.Shape, {
                    strokeWidth: 2,
                    fromArrow: "Circle",
                    fill: "white",
                    stroke: "#f79d91"
                }),
                { // this tooltip shows the name and picture of the kitten
                    toolTip: linkAdorment
                }
            );
        let commonContactsLink =
            _(go.Link, {
                opacity: 1,
                routing: go.Link.Orthogonal,
                curve: go.Link.JumpGap,
                corner: 10,
                layerName: "Background"
            },
                _(go.Shape, {
                    strokeWidth: 3,
                    stroke: "#ff78e2"
                }),
                _(go.Shape, {
                    strokeWidth: 2,
                    toArrow: "Block",
                    fill: "white",
                    stroke: "#ff78e2",
                }),
                _(go.Shape, {
                    strokeWidth: 2,
                    fromArrow: "Block",
                    fill: "white",
                    stroke: "#ff78e2"
                }),
                { // this tooltip shows the name and picture of the kitten
                    toolTip: linkAdorment
                }
            );
        /* 
        --------------------------------------------------------
        --------------------------------------------------------
        --------------------------------------------------------
        */
        const managerLinkOld =
            _(go.Link, {
                opacity: 1,
                routing: go.Link.Orthogonal,
                curve: go.Link.JumpGap,
                corner: 10,
                layerName: "Background",
                toShortLength: 3,
                fromShortLength: 3,
            },
                _(go.Shape, {
                    strokeWidth: 4,
                    stroke: "transparent",
                    pathPattern: _(go.Shape,
                        {
                            geometryString: 'M0 0 M20 0 L25 0',
                            fill: "transparent",
                            stroke: "black",
                            strokeWidth: 4,
                            strokeCap: 'square'
                        })
                }
                    /*,
                                    // the Shape.stroke color depends on whether Link.isHighlighted is true
                                    new go.Binding("stroke", "isHighlighted", function (h) {
                                        return h ? "red" : "black";
                                    })
                                        .ofObject(),
                                    // the Shape.strokeWidth depends on whether Link.isHighlighted is true
                                    new go.Binding("strokeWidth", "isHighlighted", function (h) {
                                        return h ? 3 : 1;
                                    })
                                        .ofObject()
                    */
                ),
                _(go.Shape, { toArrow: "Block" },
                    // the Shape.fill color depends on whether Link.isHighlighted is true
                    new go.Binding("fill", "isHighlighted", function (h) {
                        return h ? "red" : "black";
                    })
                        .ofObject()),
                _(go.Shape, { fromArrow: "BackwardTriangle" })
            );
        let founderLinkOld =
            _(go.Link, {
                opacity: 1,
                routing: go.Link.Orthogonal,
                curve: go.Link.JumpGap,
                corner: 10,
                toShortLength: 4,
                fromShortLength: 4,
                layerName: "Background"
            },
                _(go.Shape, {
                    strokeWidth: 4,
                    stroke: "transparent",
                    pathPattern: _(go.Shape,
                        {
                            geometryString: 'M0 0 M4 0 L6 0',
                            fill: "transparent",
                            stroke: "#f79d91",
                            strokeWidth: 3,
                            strokeCap: 'square'
                        })
                }),
                _(go.Shape, {
                    toArrow: "Block",
                    fill: "#f79d91",
                    stroke: "#f79d91",
                }),
                _(go.Shape, {
                    fromArrow: "BackwardTriangle",
                    fill: "#f79d91",
                    stroke: "#f79d91",
                    scale: 2
                })
            );
        let stakeholderLinkOld =
            _(go.Link, {
                opacity: 1,
                routing: go.Link.Orthogonal,
                curve: go.Link.JumpGap,
                corner: 10,
                layerName: "Background"
            },
                _(go.Shape, {
                    strokeWidth: 0,
                    stroke: "transparent",
                    pathPattern: _(go.Shape,
                        {
                            geometryString: 'M0 0 M3 0 L6 0',
                            fill: "transparent",
                            stroke: "#8d9dd0",
                            strokeWidth: 1,
                            strokeCap: 'square'
                        })
                }),
                _(go.Shape, {
                    toArrow: "Block",
                    fill: "#8d9dd0",
                    stroke: "#8d9dd0",
                }),
                _(go.Shape, {
                    fromArrow: "BackwardTriangle",
                    fill: "#8d9dd0",
                    stroke: "#8d9dd0",
                    scale: 2
                })
            );
        let familyLinkOld =
            _(go.Link, {
                //routing: go.Link.Orthogonal ,
                opacity: 1,
                curve: go.Link.JumpGap,
                corner: 10,
                layerName: "Background"
            },
                _(go.Shape, {
                    strokeWidth: 4,
                    stroke: "transparent",
                    pathPattern: _(go.Shape,
                        {
                            geometryString: 'M0 0 M3 0 L6 0',
                            fill: "transparent",
                            stroke: "#f9d491",
                            strokeWidth: 1,
                            strokeCap: 'square'
                        })
                })
                /*,
                            _(go.Shape,
                                {
                                    toArrow: "Block",
                                    fill: "#f9d491",
                                    stroke: "#f9d491",
                                }),
                            _(go.Shape,
                                {
                                    fromArrow: "Block",
                                    fill: "#f9d491",
                                    stroke: "#f9d491"
                                })*/
            );
        let otherLinkOld =
            _(go.Link, {
                opacity: 1,
                routing: go.Link.Orthogonal,
                curve: go.Link.JumpGap,
                corner: 10,
                layerName: "Background"
            },
                _(go.Shape, {
                    strokeWidth: 3,
                    stroke: "transparent",
                    pathPattern: _(go.Shape,
                        {
                            geometryString: 'M0 0 M3 0 L6 0',
                            fill: "transparent",
                            stroke: "#f79d91",
                            strokeWidth: 1,
                            strokeCap: 'square'
                        })
                }),
                _(go.Shape, {
                    strokeWidth: 2,
                    toArrow: "Circle",
                    fill: "white",
                    stroke: "#f79d91",
                }),
                _(go.Shape, {
                    strokeWidth: 2,
                    fromArrow: "Circle",
                    fill: "white",
                    stroke: "#f79d91"
                })
            );

        let linkTemplateMap = new go.Map();

        linkTemplateMap.add("manager", managerLink);
        linkTemplateMap.add("founder", founderLink);
        linkTemplateMap.add("stakeholder", stakeholderLink);
        linkTemplateMap.add("family", familyLink);
        linkTemplateMap.add("other", otherLink);
        linkTemplateMap.add("common_contacts", commonContactsLink);

        linkTemplateMap.add("manager_old", managerLinkOld);
        linkTemplateMap.add("founder_old", founderLinkOld);
        linkTemplateMap.add("stakeholder_old", stakeholderLinkOld);
        linkTemplateMap.add("family_old", familyLinkOld);
        linkTemplateMap.add("other_old", otherLinkOld);

        return linkTemplateMap;
    }
}
/********************************************************************************************************************************
 ******************************************                   *******************************************************************
 ******************************************   End Templates   *******************************************************************    
 ******************************************                   *******************************************************************
 *******************************************************************************************************************************/
function getNodeCategory(K021) {
    const K = K021,
        NODE_CATEGORIES = {
            BANK: 'Bank',
            PS: 'PS',
            LS: 'LS',
            PSF: 'PSF',
            BANKF: 'BankF',
            GOV: "GOV"
        };

    switch (true) {
        case (K === "3"):
            return NODE_CATEGORIES.BANK;
        case (K === "2" || K === "6" || K === "A" || K === "F" || K === "I"):
            return NODE_CATEGORIES.PS;
        case (K === "4"):
            return NODE_CATEGORIES.BANKF;
        case (K === "G"):
            return NODE_CATEGORIES.GOV;
        case (K === "5" || K === "7" || K === "B" || K === "H" || K === "L"):
            return NODE_CATEGORIES.PSF;
        case (K === "1" || K === "D" || K === "E" || K === "8" || K === "9" || K === "C" || K === "K"):
            return NODE_CATEGORIES.LS;
        default:
            return NODE_CATEGORIES.LS;
    }
}


function getNodeColor(K060) {
    const K = K060;
    const COLORS = { GREEN: "green", LIGHTGREEN: "lightgreen", VIOLET: "violet", YELLOW: "yellow", OCEAN: "ocean", WHITE: "white" };

    switch (true) {
        case (K === "01" || K === "02" || K === "03"):
            return COLORS.GREEN;
        case (K === "04" || K === "05" || K === "06" || K === "F" || K === "I"):
            return COLORS.LIGHTGREEN;
        case (K === "07" || K === "08"):
            return COLORS.VIOLET;
        case (K === "09"):
            return COLORS.YELLOW;
        case (K === "99"):
            return COLORS.OCEAN;
        default:
            console.log('default color for node')
            return COLORS.WHITE;
    }
}

function getLinkCategory(F069) {
    const F = F069,
        LINK_CATEGORIES = {
            MANAGER: "manager",
            FOUNDER: "founder",
            STAKEHOLDER: "stakeholder",
            FAMILY: "family",
            OTHER: "other",
            COMMON_CONTACTS: "common_contacts",
            MANAGER_OLD: "manager_old",
            FOUNDER_OLD: "founder_old",
            STAKEHOLDER_OLD: "stakeholder_old",
            FAMILY_OLD: "family_old",
            OTHER_OLD: "other_old"
        };

    if (F === "01" || F === "02" || F === "07" || F === "08" || F === "10" || F === "11")
        return LINK_CATEGORIES.FOUNDER;
    if (parseInt(F) >= 12 && parseInt(F) <= 15)
        return LINK_CATEGORIES.MANAGER;
    if (F === "68" || F === "69")
        return LINK_CATEGORIES.STAKEHOLDER;
    if (parseInt(F) >= 16 && parseInt(F) <= 40)
        return LINK_CATEGORIES.FAMILY;
    if (F === "06" || F === "09" || F === "41" || F === "99" || F === "60" || F === "65" || F === "66")
        return LINK_CATEGORIES.OTHER;
    if (parseInt(F) >= 61 && parseInt(F) <= 64)
        return LINK_CATEGORIES.COMMON_CONTACTS
    return LINK_CATEGORIES.STAKEHOLDER;
}

/**
 * Accepts parameteres required to decide what image we should use in Node template.
 * Method created to be sure that every node will have the coresponding images 
 * 
 * @param entityType {String} "bank" | "gov" | "human"  
 * @param color {String} "green" | "lightgreen" | "yellow" | "violet" | "ocean" | "white"
 * @param isForeign {Boolean}
 * 
*  @returns {String} Base64 encoded image string 
*/

function nodeImageStringHelper(entityType, color, isForeign) {


    const DEFAULT_RETURN = "";
    // stands for white human ^^^

    if (!VIS_IMAGES_BASE64) {
        console.error("No base64 image encodings variable. Using default image.");
        return DEFAULT_RETURN;
    }

    const entities = ["human", "gov", "bank"];
    const default_entity = entities[0] // human 
    const colors = ["white", "green", "lightgreen", "yellow", "violet", "ocean"];
    const default_color = colors[0] // white

    let _entityType;
    if (entities.includes(entityType)) {
        _entityType = entityType;
    } else {
        _entityType = default_entity
        console.warn(`[${this.name}] Wrong entity type: ${entityType}, using default one: ${default_entity}`);
    }
    let _color;
    if (colors.includes(color)) {
        _color = color;
    } else {
        _color = default_color;
        console.warn(`[${this.name}] Wrong color: ${color}, using default one: ${default_color}`);
    }

    let properyName = _entityType + "_" + _color + (isForeign ? "_f" : "");

    if (!VIS_IMAGES_BASE64[properyName]) {
        console.error(`[${this.name}] Coresponding image string hasn't been found for property ${properyName}, using default style`);
        return DEFAULT_RETURN;
    }
    if (!VIS_IMAGES_BASE64[properyName].str) {
        console.error(`[${this.name}] "Str" property hasn't been found for ${properyName}, using default style`);
        return DEFAULT_RETURN;
    }
    return VIS_IMAGES_BASE64[properyName].str;
}